version: "3.7"
services:
  #  production:
  #    build:
  #      context: ../api
  #      dockerfile: ../api
  #      target: production
  #      args:
  #        - BASE_BUILD_IMAGE: 11-jdk
  #    image: ${DOCKER_REPO}/api:latest
  workspace:
    build:
      context: ../api
      #      dockerfile: ../api
      target: build
    #      Start the container but don't do anything
    entrypoint: ["tail", "-f", "/dev/null"]
    env_file:
      - ../api/api.env
    environment:
      ARTIFACT_NAME: "api-0.0.1-SNAPSHOT.jar"
      ## Overwrite current profile when in workspace environment
      SPRING_PROFILES_ACTIVE: ${API_SPRING_PROFILES_ACTIVE}
      SERVER_PORT: ${API_HOST_PORT}
      FLYWAY_CONFIG_FILES: flyway.conf
      ## Remote Debug info
      JPDA_ADDRESS: "8000"
      JPDA_TRANSPORT: "dt_socket"
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n"
      JPDA_OPTS: "-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n"
    depends_on:
      - postgres
    expose:
      - ${API_CONTAINER_PORT} # Port available to other services
    ports:
      - "${API_CONTAINER_PORT}:${API_HOST_PORT}"
      - "5005:5005"
    networks:
      - back-end
      - front-end
    volumes:
      - ${API_HOST_CODE_PATH}:/app # TODO: mount logs
#      - ~/.m2:/root/.m2
  postgres:
    shm_size: '256MB'
    build:
      context: ../db
    #      dockerfile: ../db
    networks:
      - back-end
    env_file:
      - ../db/db.env
    environment:
      PGDATA: ${DB_CONTAINER_DATA_PATH}
    ports:
      - "${DB_CONTAINER_PORT}:${DB_HOST_PORT}"
    expose:
      - ${DB_CONTAINER_PORT}
    volumes:
      - ${DB_HOST_DATA_PATH}:${DB_CONTAINER_DATA_PATH} #TODO: Mount logs

  frontend:
    build:
      context: ../web-frontend
      target: build
    networks:
      - front-end
    entrypoint: ["tail", "-f", "/dev/null"]
    env_file:
      - ../web-frontend/web-frontend.env
    depends_on:
      - workspace
    environment:
      HTTPSERVER_PORT: ${FRONTEND_CONTAINER_PORT}
    ports:
      - "${FRONTEND_CONTAINER_PORT}:${FRONTEND_HOST_PORT}"
    volumes:
      - ../web-frontend/customer-app/:/app/
      - /app/node_modules

networks:
  front-end:
  back-end:
volumes:
  db-data:
