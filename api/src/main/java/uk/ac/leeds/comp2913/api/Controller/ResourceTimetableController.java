package uk.ac.leeds.comp2913.api.Controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RestController;import javax.validation.Valid;import uk.ac.leeds.comp2913.api.DataAccessLayer.Repository.ResourceRepository;import uk.ac.leeds.comp2913.api.Domain.Model.Resource;import uk.ac.leeds.comp2913.api.Exception.ResourceNotFoundException;@RestController//@RequestMapping("/resource/timetable")public class ResourceTimetableController {    @Autowired    private ResourceRepository resourceRepository;    @GetMapping("/resources")    public Page<Resource> getResources(Pageable pageable) {        return resourceRepository.findAll(pageable);    }    @PostMapping("/resources")    public Resource createResource(@Valid @RequestBody Resource resource) {        return resourceRepository.save(resource);    }    @PutMapping("/resources/{resource_id}")    public Resource updateResource(@PathVariable Long resource_id,                                   @Valid @RequestBody Resource resourceRequest) {        return resourceRepository.findById(resource_id)                .map(resource -> {                    resource.setName(resourceRequest.getName());                    resource.setActivities(resourceRequest.getActivities()); //need to change this                    return resourceRepository.save(resource);                }).orElseThrow(() -> new ResourceNotFoundException("Resource not found with id " + resource_id));    }    @DeleteMapping("/resources/{resource_id}")    public ResponseEntity<?> deleteResource(@PathVariable Long resource_id) {        return resourceRepository.findById(resource_id)                .map(resource -> {                    resourceRepository.delete(resource);                    return ResponseEntity.ok().build();                }).orElseThrow(() -> new ResourceNotFoundException("Resource not found with id " + resource_id));    }}